import { computed, toValue, defineComponent, openBlock, createBlock, unref, normalizeProps, guardReactiveProps, withCtx, renderSlot } from 'vue';
import { a as isNumber, m as mergePrimitiveAttrs, n as normalizeAttrs, c as convertPropsToHookProps } from './shared.mjs';
import { P as Primitive } from './primitive.mjs';
import { c as createContext } from './hooks.mjs';

const DEFAULT_MAX = 100;
function defaultGetValueLabel(value, max) {
  return `${Math.round(value / max * 100)}%`;
}
function getProgressState(value, maxValue) {
  return value == null ? "indeterminate" : value === maxValue ? "complete" : "loading";
}
function isValidMaxNumber(max) {
  return isNumber(max) && !Number.isNaN(max) && max > 0;
}
function isValidValueNumber(value, max) {
  return isNumber(value) && !Number.isNaN(value) && value <= max && value >= 0;
}

const [provideProgressContext, useProgressContext] = createContext("Progress");
function useProgressRoot(props) {
  const { max = DEFAULT_MAX, getValueLabel = defaultGetValueLabel } = props;
  const valueLabel = computed(() => {
    const _value = props.value?.();
    return isNumber(_value) ? getValueLabel(_value, toValue(max)) : void 0;
  });
  provideProgressContext({
    value: props.value,
    max
  });
  return {
    attrs(extraAttrs) {
      const _value = props.value?.();
      const _max = toValue(max);
      const attrs = {
        "aria-valuemax": _max,
        "aria-valuemin": 0,
        "aria-valuenow": isNumber(_value) ? _value : void 0,
        "aria-valuetext": valueLabel.value,
        "role": "progressbar",
        "data-state": getProgressState(_value, _max),
        "data-value": _value ?? void 0,
        "data-max": _max
      };
      if (extraAttrs && extraAttrs.length > 0) {
        mergePrimitiveAttrs(attrs, extraAttrs);
      }
      return attrs;
    }
  };
}

function useProgressIndicator() {
  const context = useProgressContext("ProgressIndicator");
  return {
    attrs(extraAttrs) {
      const _value = context.value?.();
      const _max = toValue(context.max);
      const attrs = {
        "data-state": getProgressState(_value, _max),
        "data-value": _value ?? void 0,
        "data-max": _max
      };
      if (extraAttrs && extraAttrs.length > 0) {
        mergePrimitiveAttrs(attrs, extraAttrs);
      }
      return attrs;
    }
  };
}

const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  ...{
    name: "ProgressIndicator",
    inheritAttrs: false
  },
  __name: "ProgressIndicator",
  setup(__props) {
    const progressIndicator = useProgressIndicator();
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Primitive), normalizeProps(guardReactiveProps(unref(normalizeAttrs)(unref(progressIndicator).attrs([_ctx.$attrs])))), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16);
    };
  }
});

const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "ProgressRoot",
    inheritAttrs: false
  },
  __name: "ProgressRoot",
  props: {
    value: {
      type: [Number, void 0],
      required: false,
      validator(value, props) {
        return isNumber(props.max) && isValidValueNumber(value, props.max);
      },
      default: void 0
    },
    max: {
      type: Number,
      required: false,
      validator(value) {
        return isValidMaxNumber(value);
      },
      default: DEFAULT_MAX
    },
    getValueLabel: {
      type: Function,
      required: false,
      default: defaultGetValueLabel
    }
  },
  setup(__props) {
    const props = __props;
    const progressRoot = useProgressRoot(convertPropsToHookProps(props, ["value", "max"]));
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Primitive), normalizeProps(guardReactiveProps(unref(normalizeAttrs)(unref(progressRoot).attrs([_ctx.$attrs])))), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16);
    };
  }
});

export { _sfc_main$1 as _, useProgressContext as a, useProgressRoot as b, _sfc_main as c, provideProgressContext as p, useProgressIndicator as u };
//# sourceMappingURL=progress.mjs.map
