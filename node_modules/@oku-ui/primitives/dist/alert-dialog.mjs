import { defineComponent, openBlock, createBlock, unref, normalizeProps, guardReactiveProps, withCtx, renderSlot, mergeDefaults, createCommentVNode } from 'vue';
import { u as useDialogContentImplModal, a as useDialogClose, _ as _sfc_main$4, b as useDialogContent, c as useDialogRoot } from './dialog.mjs';
import { n as normalizeAttrs, c as convertPropsToHookProps } from './shared.mjs';
import { c as createContext, a as useRef } from './hooks.mjs';
import { P as Primitive } from './primitive.mjs';

const [provideAlertDialogContentContext, useAlertDialogContentContext] = createContext("AlertDialogContent");
function useAlertDialogContentImpl(props = {}) {
  const cancelRef = useRef();
  provideAlertDialogContentContext({
    cancelRef
  });
  const dialogContentImplModal = useDialogContentImplModal({
    ...props,
    onOpenAutoFocus(event) {
      props.onOpenAutoFocus?.(event);
      if (event.defaultPrevented)
        return;
      event.preventDefault();
      cancelRef.value?.focus({ preventScroll: true });
    },
    onPointerdownOutside(event) {
      event.preventDefault();
    },
    onInteractOutside(event) {
      event.preventDefault();
    }
  });
  const attrs = {
    role: "alertdialog"
  };
  return {
    attrs(extraAttrs = []) {
      return dialogContentImplModal.attrs([attrs, ...extraAttrs]);
    }
  };
}

const DEFAULT_ALERT_DIALOG_CANCEL_PROPS = {
  as: "button"
};
function useAlretDialogCancel() {
  const dialogClose = useDialogClose();
  const context = useAlertDialogContentContext("AlertDialogCancel");
  function setElRef(v) {
    context.cancelRef.value = v;
  }
  const attrs = {
    elRef: setElRef
  };
  return {
    attrs(extraAttrs = []) {
      return dialogClose.attrs([attrs, ...extraAttrs]);
    }
  };
}

const _sfc_main$3 = /* @__PURE__ */ defineComponent({
  ...{
    name: "AlertDialogCancel",
    inheritAttrs: false
  },
  __name: "AlertDialogCancel",
  props: /* @__PURE__ */ mergeDefaults({
    as: {}
  }, DEFAULT_ALERT_DIALOG_CANCEL_PROPS),
  setup(__props) {
    const alretDialogCancel = useAlretDialogCancel();
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$4), normalizeProps(guardReactiveProps(unref(normalizeAttrs)(unref(alretDialogCancel).attrs([_ctx.$attrs, { as: _ctx.as }])))), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16);
    };
  }
});

const DEFAULT_ALERT_DIALOG_CONTENT_PROPS = {
  forceMount: void 0
};
const useAlertDialogContent = useDialogContent;

const _sfc_main$2 = /* @__PURE__ */ defineComponent({
  ...{
    name: "AlertDialogContentImpl",
    inheritAttrs: false
  },
  __name: "AlertDialogContentImpl",
  emits: ["openAutoFocus", "closeAutoFocus", "escapeKeydown", "focusOutside"],
  setup(__props, { emit: __emit }) {
    const emit = __emit;
    const alertDialogContentImpl = useAlertDialogContentImpl({
      onEscapeKeydown(event) {
        emit("escapeKeydown", event);
      },
      onFocusOutside(event) {
        emit("focusOutside", event);
      },
      onOpenAutoFocus(event) {
        emit("openAutoFocus", event);
      },
      onCloseAutoFocus(event) {
        emit("closeAutoFocus", event);
      }
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Primitive), normalizeProps(guardReactiveProps(unref(normalizeAttrs)(unref(alertDialogContentImpl).attrs([_ctx.$attrs])))), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16);
    };
  }
});

const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  ...{
    name: "AlertDialogContent"
  },
  __name: "AlertDialogContent",
  props: /* @__PURE__ */ mergeDefaults({
    forceMount: { type: Boolean }
  }, DEFAULT_ALERT_DIALOG_CONTENT_PROPS),
  setup(__props) {
    const props = __props;
    const dialogContent = useAlertDialogContent(convertPropsToHookProps(props));
    return (_ctx, _cache) => {
      return unref(dialogContent).isPresent.value ? (openBlock(), createBlock(_sfc_main$2, { key: 0 }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      })) : createCommentVNode("", true);
    };
  }
});

function useAlertDialogRoot(props = {}) {
  return useDialogRoot(props);
}

const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "AlertDialogRoot",
    inheritAttrs: false
  },
  __name: "AlertDialogRoot",
  props: {
    open: { type: Boolean, default: void 0 },
    defaultOpen: { type: Boolean, default: false }
  },
  emits: ["update:open"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    useAlertDialogRoot(convertPropsToHookProps(
      props,
      ["open"],
      () => ({
        onUpdateOpen(open) {
          emit("update:open", open);
        }
      })
    ));
    return (_ctx, _cache) => {
      return renderSlot(_ctx.$slots, "default");
    };
  }
});

export { DEFAULT_ALERT_DIALOG_CONTENT_PROPS as D, _sfc_main$3 as _, _sfc_main$1 as a, _sfc_main as b, useAlertDialogContent as u };
//# sourceMappingURL=alert-dialog.mjs.map
