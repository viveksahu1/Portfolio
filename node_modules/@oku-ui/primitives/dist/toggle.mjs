import { defineComponent, openBlock, createBlock, unref, normalizeProps, guardReactiveProps, withCtx, renderSlot, mergeDefaults } from 'vue';
import { u as useControllableStateV2 } from './hooks.mjs';
import { m as mergePrimitiveAttrs, c as convertPropsToHookProps, n as normalizeAttrs } from './shared.mjs';
import { P as Primitive } from './primitive.mjs';

const DEFAULT_TOGGLE_PROPS = {
  as: "button",
  pressed: void 0,
  defaultPressed: void 0,
  disabled: void 0
};
function useToggle(props) {
  const { defaultPressed = false } = props;
  const pressed = useControllableStateV2(props.pressed, props.onUpdatePressed, defaultPressed);
  function onClick(event) {
    if (event.defaultPrevented)
      return;
    pressed.value = !pressed.value;
  }
  return {
    attrs(extraAttrs) {
      const _disabled = props.disabled?.();
      const _pressed = pressed.value;
      const attrs = {
        "type": "button",
        "aria-pressed": _pressed,
        "data-state": _pressed ? "on" : "off",
        "disabled": _disabled,
        "data-disabled": _disabled ? "" : void 0,
        onClick
      };
      if (extraAttrs && extraAttrs.length > 0) {
        mergePrimitiveAttrs(attrs, extraAttrs);
      }
      return attrs;
    }
  };
}

const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "Toggle",
    inheritAttrs: false
  },
  __name: "Toggle",
  props: /* @__PURE__ */ mergeDefaults({
    as: {},
    pressed: { type: Boolean },
    defaultPressed: { type: Boolean },
    disabled: { type: Boolean }
  }, DEFAULT_TOGGLE_PROPS),
  emits: ["update:pressed"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const toggle = useToggle(convertPropsToHookProps(
      props,
      ["pressed", "disabled"],
      () => ({
        onUpdatePressed(value) {
          emit("update:pressed", value);
        }
      })
    ));
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Primitive), normalizeProps(guardReactiveProps(unref(normalizeAttrs)(unref(toggle).attrs([_ctx.$attrs, { as: _ctx.as }])))), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16);
    };
  }
});

export { DEFAULT_TOGGLE_PROPS as D, _sfc_main as _, useToggle as u };
//# sourceMappingURL=toggle.mjs.map
