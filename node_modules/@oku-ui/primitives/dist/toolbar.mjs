import { defineComponent, openBlock, createBlock, unref, normalizeProps, guardReactiveProps, withCtx, renderSlot, mergeDefaults } from 'vue';
import { m as mergePrimitiveAttrs, c as convertPropsToHookProps, n as normalizeAttrs } from './shared.mjs';
import { P as Primitive } from './primitive.mjs';
import { a as useRovingFocusGroupItem, u as useRovingFocusGroupRoot } from './roving-focus.mjs';
import { u as useSeparator } from './separator.mjs';
import { u as useToggleGroup, a as useToggleGroupItem } from './toggle-group.mjs';
import { c as createContext, a as useRef } from './hooks.mjs';
import { u as useDirection } from './direction.mjs';

const DEFAULT_TOOLBAR_BUTTON_PROPS = {
  as: "button",
  disabled: void 0
};
function useToolbarButton(props = {}) {
  const { disabled = () => void 0 } = props;
  const rovingFocusGroupItem = useRovingFocusGroupItem({
    focusable() {
      return !disabled();
    }
  });
  return {
    attrs(extraAttrs = []) {
      const attrs = {
        type: "button",
        disabled: disabled()
      };
      mergePrimitiveAttrs(attrs, [rovingFocusGroupItem.attrs(), ...extraAttrs]);
      return attrs;
    }
  };
}

const _sfc_main$5 = /* @__PURE__ */ defineComponent({
  ...{
    name: "ToolbarButton",
    inheritAttrs: false
  },
  __name: "ToolbarButton",
  props: /* @__PURE__ */ mergeDefaults({
    as: {},
    disabled: { type: Boolean }
  }, DEFAULT_TOOLBAR_BUTTON_PROPS),
  setup(__props) {
    const props = __props;
    const toolbarButton = useToolbarButton(convertPropsToHookProps(props, ["disabled"]));
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Primitive), normalizeProps(guardReactiveProps(unref(normalizeAttrs)(unref(toolbarButton).attrs([_ctx.$attrs, { as: _ctx.as }])))), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16);
    };
  }
});

const DEFAULT_TOOLBAR_LINK_PROPS = {
  as: "a"
};
function useToolbarLink() {
  const rovingFocusGroupItem = useRovingFocusGroupItem({
    focusable() {
      return true;
    }
  });
  function onKeydown(event) {
    if (event.defaultPrevented) {
      return;
    }
    if (event.key === " ") {
      event.currentTarget.click();
    }
  }
  return {
    attrs(extraAttrs = []) {
      const attrs = {
        onKeydown
      };
      mergePrimitiveAttrs(attrs, [rovingFocusGroupItem.attrs(), ...extraAttrs]);
      return attrs;
    }
  };
}

const _sfc_main$4 = /* @__PURE__ */ defineComponent({
  ...{
    name: "ToolbarLink",
    inheritAttrs: false
  },
  __name: "ToolbarLink",
  props: /* @__PURE__ */ mergeDefaults({
    as: {}
  }, DEFAULT_TOOLBAR_LINK_PROPS),
  setup(__props) {
    const toolbarLink = useToolbarLink();
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Primitive), normalizeProps(guardReactiveProps(unref(normalizeAttrs)(unref(toolbarLink).attrs([_ctx.$attrs, { as: _ctx.as }])))), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16);
    };
  }
});

const DEFAULT_TOOLBAR_ROOT_PROPS = {
  loop: void 0
};
const [provideToolbarContext, useToolbarContext] = createContext("Toolbar");
function useToolbarRoot(props = {}) {
  const { orientation = "horizontal", loop = true } = props;
  const elRef = props.elRef ?? useRef();
  const setElRef = props.elRef ? void 0 : (value) => elRef.value = value;
  const dir = useDirection(props.dir);
  provideToolbarContext({
    orientation,
    dir
  });
  const rovingFocusGroupRoot = useRovingFocusGroupRoot({
    elRef,
    orientation,
    loop,
    dir
  });
  return {
    attrs(extraAttrs = []) {
      const attrs = {
        "elRef": setElRef,
        "role": "toolbar",
        "aria-orientation": orientation,
        "dir": dir.value
      };
      mergePrimitiveAttrs(attrs, [rovingFocusGroupRoot.attrs(), ...extraAttrs]);
      return attrs;
    }
  };
}

const _sfc_main$3 = /* @__PURE__ */ defineComponent({
  ...{
    name: "ToolbarRoot",
    inheritAttrs: false
  },
  __name: "ToolbarRoot",
  props: /* @__PURE__ */ mergeDefaults({
    orientation: {},
    loop: { type: Boolean },
    dir: {}
  }, DEFAULT_TOOLBAR_ROOT_PROPS),
  setup(__props) {
    const props = __props;
    const toolbarRoot = useToolbarRoot(convertPropsToHookProps(props, ["dir"]));
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Primitive), normalizeProps(guardReactiveProps(unref(normalizeAttrs)(unref(toolbarRoot).attrs([_ctx.$attrs])))), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16);
    };
  }
});

const DEFAULT_TOOLBAR_SEPARATOR_PROPS = {
  decorative: void 0
};
function useToolbarSeparator(props = {}) {
  const context = useToolbarContext("ToolbarSeparator");
  const separator = useSeparator({
    orientation: context.orientation === "horizontal" ? "vertical" : "horizontal",
    decorative: props.decorative
  });
  return {
    attrs(extraAttrs) {
      return separator.attrs(extraAttrs);
    }
  };
}

const _sfc_main$2 = /* @__PURE__ */ defineComponent({
  ...{
    name: "ToolbarSeparator",
    inheritAttrs: false
  },
  __name: "ToolbarSeparator",
  props: /* @__PURE__ */ mergeDefaults({
    decorative: { type: Boolean }
  }, DEFAULT_TOOLBAR_SEPARATOR_PROPS),
  setup(__props) {
    const props = __props;
    const toolbarSeparator = useToolbarSeparator(convertPropsToHookProps(props));
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Primitive), normalizeProps(guardReactiveProps(unref(normalizeAttrs)(unref(toolbarSeparator).attrs([_ctx.$attrs])))), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16);
    };
  }
});

const DEFAULT_TOOLBAR_TOGGLE_GROUP_PROPS = {
  disabled: void 0,
  loop: void 0
};
function useToolbarToggleGroup(props) {
  const context = useToolbarContext("ToolbarToggleGroup");
  const toggleGroup = useToggleGroup({
    type: props.type,
    value: props.value,
    onUpdateValue: props.onUpdateValue,
    defaultValue: props.defaultValue,
    disabled: props.disabled,
    rovingFocus: false,
    loop: props.loop,
    orientation: props.orientation,
    dir: props.dir
  });
  const attrs = {
    "data-orientation": context.orientation
  };
  return {
    attrs(extraAttrs = []) {
      return toggleGroup.attrs([attrs, ...extraAttrs]);
    }
  };
}

const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  ...{
    name: "ToolbarToggleGroup",
    inheritAttrs: false
  },
  __name: "ToolbarToggleGroup",
  props: /* @__PURE__ */ mergeDefaults({
    type: {},
    value: {},
    defaultValue: {},
    disabled: { type: Boolean },
    loop: { type: Boolean },
    orientation: {},
    dir: {}
  }, DEFAULT_TOOLBAR_TOGGLE_GROUP_PROPS),
  emits: ["update:value"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const toolbarToggleGroup = useToolbarToggleGroup(convertPropsToHookProps(
      props,
      ["value", "disabled", "dir"],
      () => ({
        onUpdateValue(value) {
          emit("update:value", value);
        }
      })
    ));
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Primitive), normalizeProps(guardReactiveProps(unref(normalizeAttrs)(unref(toolbarToggleGroup).attrs([_ctx.$attrs])))), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16);
    };
  }
});

const DEFAULT_TOOLBAR_TOGGLE_ITEM_PROPS = {
  as: "button",
  disabled: void 0
};
function useToolbarToggleItem(props) {
  const toggleGroupItem = useToggleGroupItem({
    value: props.value,
    disabled: props.disabled
  });
  const toolbarButton = useToolbarButton({
    disabled: props.disabled
  });
  return {
    attrs(extraAttrs = []) {
      return toggleGroupItem.attrs([toolbarButton.attrs(), ...extraAttrs]);
    }
  };
}

const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "ToolbarToggleItem",
    inheritAttrs: false
  },
  __name: "ToolbarToggleItem",
  props: /* @__PURE__ */ mergeDefaults({
    as: {},
    value: {},
    disabled: { type: Boolean }
  }, DEFAULT_TOOLBAR_TOGGLE_ITEM_PROPS),
  setup(__props) {
    const props = __props;
    const toolbarToggleItem = useToolbarToggleItem(convertPropsToHookProps(props, ["value", "disabled"]));
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Primitive), normalizeProps(guardReactiveProps(unref(normalizeAttrs)(unref(toolbarToggleItem).attrs([_ctx.$attrs, { as: _ctx.as }])))), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16);
    };
  }
});

export { DEFAULT_TOOLBAR_BUTTON_PROPS as D, _sfc_main$5 as _, DEFAULT_TOOLBAR_LINK_PROPS as a, _sfc_main$4 as b, DEFAULT_TOOLBAR_ROOT_PROPS as c, _sfc_main$3 as d, DEFAULT_TOOLBAR_SEPARATOR_PROPS as e, useToolbarSeparator as f, _sfc_main$2 as g, DEFAULT_TOOLBAR_TOGGLE_GROUP_PROPS as h, useToolbarToggleGroup as i, _sfc_main$1 as j, DEFAULT_TOOLBAR_TOGGLE_ITEM_PROPS as k, useToolbarToggleItem as l, _sfc_main as m, provideToolbarContext as p, useToolbarContext as u };
//# sourceMappingURL=toolbar.mjs.map
