import { shallowRef, computed, onMounted, onBeforeUnmount, defineComponent, openBlock, createBlock, unref, normalizeProps, guardReactiveProps, withCtx, renderSlot, createCommentVNode, mergeDefaults } from 'vue';
import { u as usePresence } from './presence.mjs';
import { m as mergePrimitiveAttrs, c as convertPropsToHookProps, n as normalizeAttrs } from './shared.mjs';
import { P as Primitive } from './primitive.mjs';
import { c as createContext, u as useControllableStateV2, b as useId, a as useRef } from './hooks.mjs';
import { u as useRovingFocusGroupRoot, a as useRovingFocusGroupItem } from './roving-focus.mjs';
import { u as useDirection } from './direction.mjs';

const DEFAULT_TABS_ROOT_PROPS = {};
const [provideTabsContext, useTabsContext] = createContext("Tabs");
function useTabsRoot(props) {
  const {
    orientation = "horizontal",
    activationMode = "automatic"
  } = props;
  const direction = useDirection(props.dir);
  const value = useControllableStateV2(props.value, props.onUpdateValue, props.defaultValue);
  provideTabsContext({
    baseId: useId(),
    value,
    onValueChange(newValue) {
      value.value = newValue;
    },
    orientation,
    dir: direction,
    activationMode
  });
  return {
    attrs(extraAttrs) {
      const attrs = {
        "dir": direction.value,
        "data-orientation": orientation
      };
      if (extraAttrs && extraAttrs.length > 0) {
        mergePrimitiveAttrs(attrs, extraAttrs);
      }
      return attrs;
    }
  };
}

function makeTriggerId(baseId, value) {
  return `${baseId}-trigger-${value}`;
}
function makeContentId(baseId, value) {
  return `${baseId}-content-${value}`;
}

const DEFAULT_TABS_CONTENT_PROPS = {
  forceMount: void 0
};
function useTabsContent(props) {
  const el = props.el || shallowRef();
  const setElRef = props.el ? void 0 : (value) => el.value = value;
  const context = useTabsContext("TabsContent");
  const triggerId = computed(() => makeTriggerId(context.baseId, props.value()));
  const contentId = computed(() => makeContentId(context.baseId, props.value()));
  const isSelected = computed(() => context.value.value === props.value());
  const isMountAnimationPrevented = shallowRef(isSelected.value);
  let rAf;
  onMounted(() => {
    rAf = requestAnimationFrame(() => {
      isMountAnimationPrevented.value = false;
    });
  });
  onBeforeUnmount(() => {
    cancelAnimationFrame(rAf);
  });
  const isPresent = props.forceMount ? shallowRef(true) : usePresence(el, isSelected);
  return {
    isPresent,
    attrs(extraAttrs) {
      const attrs = {
        "elRef": setElRef,
        "id": contentId.value,
        "data-state": isSelected.value ? "active" : "inactive",
        "data-orientation": context.orientation,
        "rele": "tabpanel",
        "aria-labelledby": triggerId.value,
        "hidden": !isPresent.value,
        "tabindex": 0,
        "style": {
          animationDuration: isMountAnimationPrevented.value ? "0s" : void 0
        }
      };
      if (extraAttrs && extraAttrs.length > 0) {
        mergePrimitiveAttrs(attrs, extraAttrs);
      }
      return attrs;
    }
  };
}

const _sfc_main$3 = /* @__PURE__ */ defineComponent({
  ...{
    name: "TabsContent",
    inheritAttrs: false
  },
  __name: "TabsContent",
  props: /* @__PURE__ */ mergeDefaults({
    value: {},
    forceMount: { type: Boolean }
  }, DEFAULT_TABS_CONTENT_PROPS),
  setup(__props) {
    const props = __props;
    const tabsContent = useTabsContent(convertPropsToHookProps(props, ["value"]));
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Primitive), normalizeProps(guardReactiveProps(unref(normalizeAttrs)(unref(tabsContent).attrs([_ctx.$attrs])))), {
        default: withCtx(() => [
          unref(tabsContent).isPresent.value ? renderSlot(_ctx.$slots, "default", { key: 0 }) : createCommentVNode("", true)
        ]),
        _: 3
      }, 16);
    };
  }
});

const DEFAULT_TABS_LIST_PROPS = {
  loop: void 0
};
function useTabsList(props) {
  const {
    loop = true
  } = props;
  const elRef = props.elRef || useRef();
  const setElRef = props.elRef ? void 0 : (value) => elRef.value = value;
  const context = useTabsContext("TabsList");
  const rovingFocusGroupRoot = useRovingFocusGroupRoot({
    elRef,
    currentTabStopId: void 0,
    orientation: context.orientation,
    loop,
    dir: context.dir
  });
  return {
    attrs(extraAttrs = []) {
      const attrs = {
        "elRef": setElRef,
        "role": "tablist",
        "aria-orientation": context.orientation
      };
      mergePrimitiveAttrs(attrs, [rovingFocusGroupRoot.attrs(), ...extraAttrs]);
      return attrs;
    }
  };
}

const _sfc_main$2 = /* @__PURE__ */ defineComponent({
  ...{
    name: "TabsList",
    inheritAttrs: false
  },
  __name: "TabsList",
  props: /* @__PURE__ */ mergeDefaults({
    loop: { type: Boolean }
  }, DEFAULT_TABS_LIST_PROPS),
  setup(__props) {
    const props = __props;
    const tabsList = useTabsList(convertPropsToHookProps(props));
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Primitive), normalizeProps(guardReactiveProps(unref(normalizeAttrs)(unref(tabsList).attrs([_ctx.$attrs])))), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16);
    };
  }
});

const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  ...{
    name: "TabsRoot",
    inheritAttrs: false
  },
  __name: "TabsRoot",
  props: /* @__PURE__ */ mergeDefaults({
    value: {},
    defaultValue: {},
    orientation: {},
    dir: {},
    activationMode: {}
  }, DEFAULT_TABS_ROOT_PROPS),
  emits: ["update:value"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const tabsRoot = useTabsRoot(convertPropsToHookProps(
      props,
      ["value", "dir"],
      () => ({
        onUpdateValue(value) {
          emit("update:value", value);
        }
      })
    ));
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Primitive), normalizeProps(guardReactiveProps(unref(normalizeAttrs)(unref(tabsRoot).attrs([_ctx.$attrs])))), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16);
    };
  }
});

const DEFAULT_TABS_TRIGGER_PROPS = {
  as: "button",
  disabled: void 0
};
function useTabsTrigger(props) {
  const { disabled = () => void 0 } = props;
  const context = useTabsContext("TabsTrigger");
  const triggerId = computed(() => makeTriggerId(context.baseId, props.value()));
  const contentId = computed(() => makeContentId(context.baseId, props.value()));
  const isSelected = computed(() => context.value.value === props.value());
  function onMousedown(event) {
    if (event.defaultPrevented)
      return;
    if (event.button === 0 && event.ctrlKey === false) {
      context.onValueChange(props.value());
    } else {
      event.preventDefault();
    }
  }
  function onKeydown(event) {
    if (event.defaultPrevented)
      return;
    if ([" ", "Enter"].includes(event.key))
      context.onValueChange(props.value());
  }
  function onFocus(event) {
    if (event.defaultPrevented)
      return;
    const isAutomaticActivation = context.activationMode !== "manual";
    if (!isSelected.value && isAutomaticActivation) {
      context.onValueChange(props.value());
    }
  }
  const rovingFocusGroupItem = useRovingFocusGroupItem({
    focusable() {
      return !disabled();
    },
    active() {
      return isSelected.value;
    }
  });
  return {
    attrs(extraAttrs = []) {
      const _disabled = disabled();
      const _isSelected = isSelected.value;
      const attrs = {
        "id": triggerId.value,
        "type": "button",
        "role": "tab",
        "aria-selected": _isSelected,
        "aria-controls": contentId.value,
        "data-state": _isSelected ? "active" : "inactive",
        "data-disabled": _disabled ? "" : void 0,
        "disabled": _disabled,
        onMousedown,
        onKeydown,
        onFocus
      };
      mergePrimitiveAttrs(attrs, [rovingFocusGroupItem.attrs(), ...extraAttrs]);
      return attrs;
    }
  };
}

const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "TabsTrigger",
    inheritAttrs: false
  },
  __name: "TabsTrigger",
  props: /* @__PURE__ */ mergeDefaults({
    as: {},
    value: {},
    disabled: { type: Boolean }
  }, DEFAULT_TABS_TRIGGER_PROPS),
  setup(__props) {
    const props = __props;
    const tabsTrigger = useTabsTrigger(convertPropsToHookProps(props, ["value", "disabled"]));
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Primitive), normalizeProps(guardReactiveProps(unref(normalizeAttrs)(unref(tabsTrigger).attrs([_ctx.$attrs, { as: _ctx.as }])))), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16);
    };
  }
});

export { DEFAULT_TABS_CONTENT_PROPS as D, _sfc_main$3 as _, DEFAULT_TABS_LIST_PROPS as a, useTabsList as b, _sfc_main$2 as c, DEFAULT_TABS_ROOT_PROPS as d, useTabsContext as e, useTabsRoot as f, _sfc_main$1 as g, DEFAULT_TABS_TRIGGER_PROPS as h, useTabsTrigger as i, _sfc_main as j, provideTabsContext as p, useTabsContent as u };
//# sourceMappingURL=tabs.mjs.map
