import { defineComponent, openBlock, createBlock, unref, normalizeProps, guardReactiveProps, withCtx, renderSlot, mergeDefaults } from 'vue';
import { m as mergePrimitiveAttrs, c as convertPropsToHookProps, n as normalizeAttrs } from './shared.mjs';
import { P as Primitive } from './primitive.mjs';

const DEFAULT_SEPARATOR_PROPS = {
  decorative: void 0
};
function useSeparator(props) {
  const { orientation = "horizontal" } = props;
  return {
    attrs(extraAttrs) {
      const attrs = props.decorative ? {
        "role": "none",
        "data-orientation": orientation
      } : {
        "aria-orientation": orientation === "vertical" ? orientation : void 0,
        "role": "separator",
        "data-orientation": orientation
      };
      if (extraAttrs && extraAttrs.length > 0) {
        mergePrimitiveAttrs(attrs, extraAttrs);
      }
      return attrs;
    }
  };
}

const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "Separator"
  },
  __name: "Separator",
  props: /* @__PURE__ */ mergeDefaults({
    orientation: {},
    decorative: { type: Boolean }
  }, DEFAULT_SEPARATOR_PROPS),
  setup(__props) {
    const props = __props;
    const separator = useSeparator(convertPropsToHookProps(props));
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Primitive), normalizeProps(guardReactiveProps(unref(normalizeAttrs)(unref(separator).attrs([_ctx.$attrs])))), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16);
    };
  }
});

export { DEFAULT_SEPARATOR_PROPS as D, _sfc_main as _, useSeparator as u };
//# sourceMappingURL=separator.mjs.map
