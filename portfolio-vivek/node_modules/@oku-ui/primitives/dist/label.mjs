import { defineComponent, openBlock, createBlock, unref, normalizeProps, guardReactiveProps, withCtx, renderSlot, mergeDefaults } from 'vue';
import { m as mergePrimitiveAttrs, n as normalizeAttrs } from './shared.mjs';
import { P as Primitive } from './primitive.mjs';

const DEFAULT_LABEL_PROPS = {
  as: "label"
};
function useLabel(props) {
  function onMousedown(event) {
    const target = event.target;
    if (target.closest("button, input, select, textarea"))
      return;
    props?.onMousedown?.(event);
    if (!event.defaultPrevented && event.detail > 1)
      event.preventDefault();
  }
  return {
    attrs(extraAttrs) {
      const attrs = {
        onMousedown
      };
      if (extraAttrs && extraAttrs.length > 0) {
        mergePrimitiveAttrs(attrs, extraAttrs);
      }
      return attrs;
    }
  };
}

const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "RadixLabel",
    inheritAttrs: false
  },
  __name: "Label",
  props: /* @__PURE__ */ mergeDefaults({
    as: {}
  }, DEFAULT_LABEL_PROPS),
  emits: ["mousedown"],
  setup(__props, { emit: __emit }) {
    const emit = __emit;
    const label = useLabel({
      onMousedown(event) {
        emit("mousedown", event);
      }
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Primitive), normalizeProps(guardReactiveProps(unref(normalizeAttrs)(unref(label).attrs([_ctx.$attrs, { as: _ctx.as }])))), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16);
    };
  }
});

export { _sfc_main as _, useLabel as u };
//# sourceMappingURL=label.mjs.map
